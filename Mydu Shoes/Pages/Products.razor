@page "/Product"
@using Mydu_Shoes.Models
@inject GiayContext DbContext
@using Microsoft.EntityFrameworkCore

<h3>Plants</h3>
<style>
    .product-page {
        display: flex;
    }

    .filter-section {
        flex: 1;
        padding: 20px;
        border-right: 1px solid #e0e0e0;
    }

        .filter-section h4 {
            margin-bottom: 20px;
        }

    .category-list {
        list-style-type: none;
        padding: 0;
    }

        .category-list li {
            margin-bottom: 10px;
        }

    .products-section {
        flex: 3;
        padding: 20px;
    }

    .breadcrumbs {
        margin-bottom: 20px;
    }

        .breadcrumbs a {
            color: #999;
            text-decoration: none;
        }

            .breadcrumbs a:hover {
                text-decoration: underline;
            }

    .products-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
    }

        .products-header p {
            margin: 0;
        }

        .products-header select {
            padding: 5px;
        }

    .search-bar {
        margin-bottom: 20px;
    }

    .card {
        border: none;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        transition: transform 0.2s;
    }

        .card:hover {
            transform: scale(1.05);
        }

    .card-img-top {
        max-width: 100%;
        height: auto;
        object-fit: cover;
    }

    .card-body {
        padding: 15px;
        display: flex;
        flex-direction: column;
    }

    .card-title {
        margin: 0;
        font-size: 1.25em;
        margin-bottom: 10px;
    }

    .card-text {
        font-size: 1em;
        margin-bottom: 15px;
    }

    .btn-secondary {
        background-color: #007bff;
        color: #fff;
        border: none;
        padding: 10px;
        text-align: center;
    }

        .btn-secondary:hover {
            background-color: #0056b3;
            color: #fff;
        }
</style>
<div class="product-page">
    <div class="filter-section">
        <h4>Categories</h4>
        <ul class="category-list">
            @if (categories != null && categories.Any())
            {
                @foreach (var category in categories)
                {
                    <li>@category.Name (@category.Products.Count)</li>
                }
            }
        </ul>
    </div>
    <div class="products-section">
        <div class="breadcrumbs">
            <a href="/">Trang chủ</a> / Plants
        </div>

        <div class="products-header">
            <p>Hiển thị tất cả @filteredProductsList.Count kết quả</p>
            <select @onchange="OnSortChange">
                <option value="default">Thứ tự mặc định</option>
                <option value="price-asc">Giá: Thấp đến Cao</option>
                <option value="price-desc">Giá: Cao đến Thấp</option>
            </select>
        </div>

        <div class="search-bar">
            <input type="text" placeholder="Search..." @oninput="OnSearchInput" />
        </div>

        @if (filteredProductsList != null && filteredProductsList.Any())
        {
            <div class="row">
                @foreach (var item in filteredProductsList)
                {
                    <div class="col-md-4 mb-3">
                        <div class="card h-100">
                            <img src="@item.Img" class="card-img-top" alt="Product Image">
                            <div class="card-body d-flex flex-column">
                                <h5 class="card-title">@item.Tensp</h5>
                                <p class="card-text">@item.gia đ</p>
                                <a class="btn btn-secondary mt-auto" href="@($"/product/{item.Id}")">View Details</a>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <p>No products available.</p>
        }
    </div>
</div>

@code {
    private List<products> productsList = new List<products>();
    private List<Categories> categories = new List<Categories>();
    private List<products> filteredProductsList = new List<products>();
    private string searchQuery = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadProducts();
        await LoadCategories();
        ApplyFilters();
    }

    private async Task LoadProducts()
    {
        try
        {
            productsList = await DbContext.Product.Include(p => p.Category).ToListAsync();
            filteredProductsList = new List<products>(productsList);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading products: {ex.Message}");
        }
    }

    private async Task LoadCategories()
    {
        try
        {
            categories = await DbContext.Categories.Include(c => c.Products).ToListAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading categories: {ex.Message}");
        }
    }

    private void ApplyFilters()
    {
        filteredProductsList = productsList
            .Where(p => p.Tensp.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                        p.Description.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                        p.Category.Name.Contains(searchQuery, StringComparison.OrdinalIgnoreCase))
            .ToList();
    }

    private void OnSearchInput(ChangeEventArgs e)
    {
        searchQuery = e.Value.ToString();
        ApplyFilters();
    }

    private void OnSortChange(ChangeEventArgs e)
    {
        var sortOption = e.Value.ToString();
        switch (sortOption)
        {
            case "price-asc":
                filteredProductsList = filteredProductsList.OrderBy(p => p.gia).ToList();
                break;
            case "price-desc":
                filteredProductsList = filteredProductsList.OrderByDescending(p => p.gia).ToList();
                break;
            default:
                filteredProductsList = new List<products>(productsList);
                ApplyFilters(); // Reapply filters to reset sorting
                break;
        }
    }
}
